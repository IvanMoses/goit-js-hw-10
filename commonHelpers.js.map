{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\nconst datetimePicker = document.getElementById('datetime-picker');\nconst startButton = document.querySelector('[data-start]');\nconst timer = document.querySelector('.timer');\n\nlet userSelectedDate = null;\nlet countdownInterval = null;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    const selectedDate = selectedDates[0];\n    if (selectedDate <= new Date()) {\n      iziToast.error({ title: 'Error', message: 'Please choose a date in the future' });\n      startButton.disabled = true;\n    } else {\n      userSelectedDate = selectedDate;\n      startButton.disabled = false;\n    }\n  },\n};\n\nflatpickr(datetimePicker, options);\n\nstartButton.addEventListener('click', () => {\n  if (!userSelectedDate) return;\n\n  startButton.disabled = true;\n  datetimePicker.disabled = true;\n\n  countdownInterval = setInterval(() => {\n    const now = new Date();\n    const timeLeft = userSelectedDate - now;\n\n    if (timeLeft <= 0) {\n      clearInterval(countdownInterval);\n      updateTimerDisplay(0);\n      datetimePicker.disabled = false;\n      startButton.disabled = true;\n      return;\n    }\n\n    updateTimerDisplay(timeLeft);\n  }, 1000);\n});\n\nfunction updateTimerDisplay(timeLeft) {\n  const { days, hours, minutes, seconds } = convertMs(timeLeft);\n\n  timer.querySelector('[data-days]').textContent = addLeadingZero(days);\n  timer.querySelector('[data-hours]').textContent = addLeadingZero(hours);\n  timer.querySelector('[data-minutes]').textContent = addLeadingZero(minutes);\n  timer.querySelector('[data-seconds]').textContent = addLeadingZero(seconds);\n}\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor((ms % hour) / minute);\n  const seconds = Math.floor((ms % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nfunction addLeadingZero(value) {\n  return String(value).padStart(2, '0');\n}\n\n\n"],"names":["datetimePicker","startButton","timer","userSelectedDate","countdownInterval","options","selectedDates","selectedDate","iziToast","flatpickr","timeLeft","updateTimerDisplay","days","hours","minutes","seconds","convertMs","addLeadingZero","ms","value"],"mappings":"2FAKA,MAAMA,EAAiB,SAAS,eAAe,iBAAiB,EAC1DC,EAAc,SAAS,cAAc,cAAc,EACnDC,EAAQ,SAAS,cAAc,QAAQ,EAE7C,IAAIC,EAAmB,KACnBC,EAAoB,KAExB,MAAMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrB,MAAMC,EAAeD,EAAc,CAAC,EAChCC,GAAgB,IAAI,MACtBC,EAAS,MAAM,CAAE,MAAO,QAAS,QAAS,oCAAoC,CAAE,EAChFP,EAAY,SAAW,KAEvBE,EAAmBI,EACnBN,EAAY,SAAW,GAE1B,CACH,EAEAQ,EAAUT,EAAgBK,CAAO,EAEjCJ,EAAY,iBAAiB,QAAS,IAAM,CACrCE,IAELF,EAAY,SAAW,GACvBD,EAAe,SAAW,GAE1BI,EAAoB,YAAY,IAAM,CAEpC,MAAMM,EAAWP,EADL,IAAI,KAGhB,GAAIO,GAAY,EAAG,CACjB,cAAcN,CAAiB,EAC/BO,EAAmB,CAAC,EACpBX,EAAe,SAAW,GAC1BC,EAAY,SAAW,GACvB,MACD,CAEDU,EAAmBD,CAAQ,CAC5B,EAAE,GAAI,EACT,CAAC,EAED,SAASC,EAAmBD,EAAU,CACpC,KAAM,CAAE,KAAAE,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAYC,EAAUN,CAAQ,EAE5DR,EAAM,cAAc,aAAa,EAAE,YAAce,EAAeL,CAAI,EACpEV,EAAM,cAAc,cAAc,EAAE,YAAce,EAAeJ,CAAK,EACtEX,EAAM,cAAc,gBAAgB,EAAE,YAAce,EAAeH,CAAO,EAC1EZ,EAAM,cAAc,gBAAgB,EAAE,YAAce,EAAeF,CAAO,CAC5E,CAEA,SAASC,EAAUE,EAAI,CAMrB,MAAMN,EAAO,KAAK,MAAMM,EAAK,KAAG,EAC1BL,EAAQ,KAAK,MAAOK,EAAK,MAAO,IAAI,EACpCJ,EAAU,KAAK,MAAOI,EAAK,KAAQ,GAAM,EACzCH,EAAU,KAAK,MAAOG,EAAK,IAAU,GAAM,EAEjD,MAAO,CAAE,KAAAN,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEA,SAASE,EAAeE,EAAO,CAC7B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACtC"}